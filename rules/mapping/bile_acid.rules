# -*- mode: Snakemake -*-
#
# Reads mapping to BAI and BSH genes:
#	Rules for BLASTing against databases


rule _bile_acid_all:
    input:
        TARGET_BILE

rule _test_build_db:
    input:
        expand(str(GENES_DIR/'{gene}.fasta.{index}'), index=['nsq','nin','nhr'], gene=GENES_DICT.keys())

rule build_blastdb:
    message: "build blast databases"
    input:
        lambda wildcards: GENES_DICT[wildcards.gene]
    output:
        expand(str(GENES_DIR/'{{gene}}.fasta.{index}'), index=['nsq','nin','nhr'])
    shell:
        "makeblastdb -in {input} -dbtype nucl"

rule fq2fa:
    message: "convert fastq files into fasta files"
    input:
        str(QC_FP/'decontam'/'{sample}_R1.fastq')
    output:
        str(MAPPING_FP/'R1'/'{sample}_R1.fasta')
    shell:
        "fastq_to_fasta_fast {input} > {output}"

rule read_blastn:
    #message: "run blastn against a given database and write the results into tabular"
    input:
        read = str(MAPPING_FP/'R1'/'{sample}_R1.fasta'),
        db = expand(str(GENES_DIR/'{{gene}}.fasta.{index}'), index=['nsq','nin','nhr'])
    output:
        str(MAPPING_FP/'blastn'/'bile_acid'/'{gene}'/'{sample}_R1.blastn')
    params:
        db=lambda wildcard: GENES_DICT[wildcard.gene]
    threads: 
        Cfg['blast']['threads']
    shell:
        """
        blastn \
        -query {input.read} \
        -db {params.db} \
        -outfmt 6 \
        -num_threads {threads} \
        -evalue 1e-10 \
        -out {output} \
        """
