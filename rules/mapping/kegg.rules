# -*- mode: Snakemake -*-
#
# PathwayFinder rules
#
# Requires zhaoc1/PathwayAbundanceFinder (fork for py3+ compatibility / config file )

import pandas
from io import StringIO

rule all_path:
    input:
        TARGET_PATH+TARGET_PATHREPORT

rule path_finder:
    """Find presence/absence/abundance of pathways from metagenomic data."""    
    input:
        r1 = str(QC_FP/'decontam'/'{sample}_R1.fastq'),
        r2 = str(QC_FP/'decontam'/'{sample}_R2.fastq')
    output:
        summary = str(MAPPING_FP/'summary'/'pathfinder'/'{sample}_summary.json'),
        ko = str(MAPPING_FP/'pathfinder'/'{sample}.ko')
    params:
        output_dir = str(MAPPING_FP/'pathfinder'),
        #rapsearch = str(Cfg['mapping']['rapsearch_fp']/'rapsearch')
    threads: 
        Cfg['mapping']['threads']
    shell:
        """
        pathfinder.py --forward-reads {input.r1} --reverse-reads {input.r2} \
        --output-dir {params.output_dir} \
        --summary-file {output.summary} \
        --threads {threads} \
        --kegg_fp {Cfg[mapping][kegg_fp]} \
        --kegg_idx_fp {Cfg[mapping][kegg_idx_fp]} \
        --kegg_to_ko_fp {Cfg[mapping][kegg_to_ko_fp]} \
        --rap_search_fp rapsearch
        """

def parse_results(fp, input_suffix):
    """ Return a DataFrame containing the results of one sample"""
    sample_name = os.path.basename(fp).rsplit(input_suffix)[0]
    return pandas.read_csv(fp, sep='\t', index_col=0, names=[sample_name], skiprows=1)

rule ko_assignment_report:
    """ make gene content table """
    input:
        fps = expand(str(MAPPING_FP/'pathfinder'/'{sample}.ko'), sample = Samples.keys())
    output:
        str(MAPPING_FP/'ko_assignments.tsv')
    run:
        kos = []
        for fp in input.fps:
            # filter out the files that don't have any results
            if os.path.getsize(fp) > 1:
                # build pandas dataframes for each file of results
                kos.append(parse_results(fp,".ko"))
        # merge the column results
        kos = pandas.concat(kos, axis=1)

        # write them to file. Replace NAs (due to merging) with 0.
        kos.to_csv(output[0], sep='\t', na_rep=0, index_label="Term")
