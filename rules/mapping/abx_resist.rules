# -*- mode: Snakemake -*-
#
# Antibiotics resistance genes mapping: presence/absence in a sample
#

rule _abx_resist_all:
    input:
        TARGET_ABX

rule _test_blasdb_prot:
    input:
        expand(
            str(BLASTDB_DIR/'{subfolder}/{seq}.fasta.{index}'), 
                subfolder=list(BLASTDB_RAW_DICT_PROT.keys()), 
                seq = BLASTDB_DICT_PROT.keys(), 
                index=['psq','pin','phr'])

rule _test_blasdb_nucl:
    input:
        expand(
            str(BLASTDB_DIR/'{subfolder}/{seq}.fasta.{index}'), 
                subfolder=list(BLASTDB_RAW_DICT_NUCL.keys()), 
                seq = BLASTDB_DICT_NUCL.keys(), 
                index=['nsq','nin','nhr'])

rule build_blastdb_prot:
    message: "build blast databases (prot)"
    input:
        lambda wildcard: BLASTDB_DICT_PROT[wildcard.db]
    output:
        expand(str(BLASTDB_DIR/'{subfolder}'/'{{db}}.fasta.{index}'), subfolder=list(BLASTDB_RAW_DICT_PROT.keys()), index=['psq','pin','phr'])
    shell:
        "makeblastdb -in {input} -dbtype prot"

rule build_blastdb_nucl:
    message: "build blast databases (nucl)"
    input:
        lambda wildcard: BLASTDB_DICT_NUCL[wildcard.db]
    output:
        expand(str(BLASTDB_DIR/'{subfolder}'/'{{db}}.fasta.{index}'), subfolder=list(BLASTDB_RAW_DICT_NUCL.keys()), index=['nsq','nin','nhr'])
    shell:
        "makeblastdb -in {input} -dbtype nucl"

rule card_blastx:
    message: "run blastx for contig against card db and write the results into tabular"
    input:
        contig = str(ASSEMBLY_FP/'{sample}_assembly'/'final-contigs.fa'),
        db = lambda wildcard: Blastdbs['prot'][wildcard.db]
    output:
        str(ANNOTATION_FP/'blastx'/'{db}'/'{sample}.blastx')
    threads: 
        Cfg['blast']['threads']
    shell:
        """
        blastx \
        -query {input.contig} \
        -db {input.db} \
        -outfmt 6 \
        -num_threads {threads} \
        -evalue 0.01 \
        -max_target_seqs 1 \
        -out {output}
        """

rule card_blastn:
    message: "run blastn for R1 read against card db and write the results into tabular"
    input:
        R1 = str(MAPPING_FP/'R1'/'{sample}_R1.fasta'),
        db = lambda wildcard: Blastdbs['nucl'][wildcard.db]
    output:
        str(MAPPING_FP/'blastn'/'{db}'/'{sample}_R1.blastn')
    threads: 
        Cfg['blast']['threads']
    shell:
        """
        blastn \
        -query {input.R1} \
        -db {input.db} \
        -outfmt 6 \
        -num_threads {threads} \
        -evalue 1e-10 \
        -out {output}
        """

rule diamond:
    input:
        str(ASSEMBLY_FP/'{sample}_assembly'/'final-contigs.fa')
    output:
        temp(str(ANNOTATION_FP/'diamond'/'{db}'/'{sample}.daa'))
    params:
        out = str(ANNOTATION_FP/'diamond'/'{db}'/'{sample}'),
        db = lambda wildcard: Blastdbs['prot'][wildcard.db]
    shell:
        """
        diamond blastx \
        --db {params.db} \
        --query {input} \
        --daa {params.out} \
        --threads {Cfg[all][subcores]}
        """

rule daa_to_fmt6:
    input:
        str(ANNOTATION_FP/'diamond'/'{db}'/'{sample}.daa')
    output:
        str(ANNOTATION_FP/'diamond'/'{db}'/'{sample}.blastn')
    shell:
        "diamond view --daa {input} > {output}"
