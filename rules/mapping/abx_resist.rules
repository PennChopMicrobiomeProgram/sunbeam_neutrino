# -*- mode: Snakemake -*-
#
# Antibiotics resistance genes mapping: presence/absence in a sample
#

rule _abx_resist_all:
    input:
        TARGET_ABX

rule card_blastx:
    message: "run blastx for contig against card db and write the results into tabular"
    input:
        contig = str(ASSEMBLY_FP/'{sample}_assembly'/'final-contigs.fa'),
        db = lambda wildcard: Blastdbs['prot'][wildcard.db]
    output:
        str(ANNOTATION_FP/'blastx'/'{db}'/'{sample}.blastx')
    threads: 
        Cfg['blast']['threads']
    shell:
        """
        blastx \
        -query {input.contig} \
        -db {input.db} \
        -outfmt 6 \
        -num_threads {threads} \
        -evalue 1e-5 \
        -max_target_seqs 1 \
        -out {output}
        """

rule card_blastx_R1:
    message: "run blastx for R1 read against card db and write the results into tabular"
    input:
        R1 = str(MAPPING_FP/'R1'/'{sample}_R1.fasta'),
        db = lambda wildcard: Blastdbs['prot'][wildcard.db]
    output:
        str(MAPPING_FP/'blastx'/'{db}'/'{sample}_R1.blastx')
    threads: 
        Cfg['blast']['threads']
    shell:
        """
        blastx \
        -query {input.R1} \
        -db {input.db} \
        -outfmt 6 \
        -num_threads {threads} \
        -evalue 1e-10 \
        -out {output}
        """

rule card_blastn:
    message: "run blastn for R1 against card db and write the results into tabular"
    input:
        R1 = str(MAPPING_FP/'R1'/'{sample}_R1.fasta'),
        db = lambda wildcard: Blastdbs['nucl'][wildcard.db]
    output:
        str(MAPPING_FP/'blastn'/'{db}'/'{sample}.blastn')
    threads: 
        Cfg['blast']['threads']
    shell:
        """
        blastn \
        -query {input.R1} \
        -db {input.db} \
        -outfmt 6 \
        -num_threads {threads} \
        -evalue 1e-10 \
        -max_target_seqs 1 \
        -out {output}
        """

rule diamond:
    input:
        str(ASSEMBLY_FP/'{sample}_assembly'/'final-contigs.fa')
    output:
        temp(str(ANNOTATION_FP/'diamond'/'{db}'/'{sample}.daa'))
    params:
        out = str(ANNOTATION_FP/'diamond'/'{db}'/'{sample}'),
        db = lambda wildcard: Blastdbs['prot'][wildcard.db]
    shell:
        """
        diamond blastx \
        --db {params.db} \
        --query {input} \
        --daa {params.out} \
        --threads {Cfg[all][subcores]}
        """

rule daa_to_fmt6:
    input:
        str(ANNOTATION_FP/'diamond'/'{db}'/'{sample}.daa')
    output:
        str(ANNOTATION_FP/'diamond'/'{db}'/'{sample}.blastn')
    shell:
        "diamond view --daa {input} > {output}"
